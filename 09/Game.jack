
/**
* 
*/
class Game {
    field Board board;
    field PlayerGame playerGame;
    field Array guards;
    field int guardsNumber;
    field int gameSpeed;

    /**
    *
    */
    constructor Game new() {
        var int difficulty;
        let difficulty = getDifficulty();

        let board = Board.new();
        do initCharacters(difficulty);
    
        return this;
    }

    /**
    *
    */
    method void dispose() {
        do board.dispose();
        do playerGame.dispose();
        do Utils.disposeGuardsArray(guards, guardsNumber);
        
        do Memory.deAlloc(this);
        return;
    }


    /**
    * Wlecome the user and sets Game's Difficulty to the desire one.
    */
    method int getDifficulty() {
        var char key;
        do Messages.Welcome();
        
        while (true) {
            let key = Keyboard.keyPressed();
            if (key = 49) { return 1;}  // Diffifulty 1
            if (key = 50) { return 2;}  // Diffifulty 2
            if (key = 51) { return 3;}  // Diffifulty 3
        }
        return 0;
    }

    /**
    * Initialize Games Characters - Player and Guards according to the chosen difficult leve.
    * There are 3 different options, each affects the number of guard and game speed.
    * [1] - GameSpeed = 15  | GuardsNumber = 2
    * [2] - GameSpeed = 10  | GuardsNumber = 3
    * [3] - GameSpeed = 5   | GuardsNumber = 4
    *
    * Args: gameDifficulty (int) in range 1-3
    */
    method void initCharacters(int gameDifficulty) {
        if (gameDifficulty = 1){
            let gameSpeed = 27;
            let guardsNumber = 1;
        }

        if (gameDifficulty = 2){
            let gameSpeed = 17;
            let guardsNumber = 2;
        }
        
        if (gameDifficulty = 3){
            let gameSpeed = 10;
            let guardsNumber = 4;
        }

        let guards = Utils.buildGuardsArray(guardsNumber, gameSpeed);
        let playerGame = PlayerGame.new(gameSpeed);
        return;
    }


    /**
    * Start The Game Session
    * 
    */
    method void start() {
        var int i;
        var Guard currentGuard;

        while ((~playerGame.getExit())){
            let i = 0;

            do playerGame.runPlayer();
            if(isGameOver()){ 
                do Game.finishGame(0);
                return;
            }

            while (i < guardsNumber) {
                let currentGuard = guards[i];
                do currentGuard.move();
                let i = i + 1;

                if(isGameOver()){ 
                    do Game.finishGame(0); 
                    return;
                }
            }
            if(isWin()) { 
                do Game.finishGame(1);
                return;
            }
        }
        
        return;
    }


    //////////////////////////////////////////////
    //             Status Checkers              //
    //////////////////////////////////////////////

    /**
    * Handle the Finish Message to User
    * Args: status(int) - 0 stands for GameOver, 1 stands for WinGame
    */
    function void finishGame(int status){
        do Sys.wait(1000);
        if (status = 0) { do Messages.GameOver(); }
        if (status = 1) { do Messages.WinGame() ;}
        return;
    }


    /**
    *
    */
    function boolean isRestart() {
        var char key;
        while (true) {
            let key = Keyboard.keyPressed();
            if (key = 82) { return true;} // if R is pressed -> RESTART
            if (key = 81) { return false;}// if Q is pressed -> QUIT
        }
        return true;
    }


    /**
    * 
    * shortCircuite
    */
    method boolean isWin() {
        var Guard currentGuard;
        var int i;
        var boolean win;

        let i = 0;
        let win = true;

        while ((i < guardsNumber) & (win)) {
            let currentGuard = guards[i];
            let win = win & currentGuard.canNotMove();

            let i = i + 1;
        }
        
        return win;
    }

    /**
    *
    * shortCircuite
    */
    method boolean isGameOver() {
        var Guard currentGuard;
        var int i;
        var boolean loose;

        let i = 0;
        let loose = false;

        while ((i < guardsNumber) & (~loose)){
            let currentGuard = guards[i];
            let loose = loose | ((playerGame.getX() = currentGuard.getX()) & (playerGame.getY() = currentGuard.getY()));

            let i = i + 1;
        }

        return loose;
    }
}