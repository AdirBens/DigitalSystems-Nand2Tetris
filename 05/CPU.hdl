// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    //----------------------------------------------------------------------------------------
    // D Register - 
    //  * check if both `load` D-Reg bit and OpCode bit are set to be on
    //  * if true input will load to D-Register, else D-Register preserve it's state.
    //----------------------------------------------------------------------------------------
    And(a=instruction[4], b=instruction[15], out=dRegLoad);
    DRegister(in=aluOut, load=dRegLoad, out=dRegOut);
    //----------------------------------------------------------------------------------------
    // A Register - 
    //  * assess op-code to determain if consider input as C-Instruction or A-Instruction
    //  * check if A-Register need to be load (2nd dest bit is on)
    //  >finaly:
    //   1. determine propper A-Register's load flag
    //   2. Route input: A-Instruction? A-Register <- instruction, else A-Registre <- ALU-OUT)
    //---------------------------------------------------------------------------------------- 
    And(a=instruction[5], b=instruction[15], out=CInstANDdestA); 
    Not(in=instruction[15], out=NotOPCODE);
    Or(a=NotOPCODE, b=CInstANDdestA, out=ARegLoad);
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=detAinstOrCinst);
    ARegister(in=detAinstOrCinst, load=ARegLoad, out[0..14]=addressM, out=aRegOut);
    //----------------------------------------------------------------------------------------
    // ALU - set input and flags and apply propper logic on input
    //----------------------------------------------------------------------------------------
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=mInOrARegOut);
    ALU(x=dRegOut, y=mInOrARegOut, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7], 
        no=instruction[6], out=aluOut, out=outM, zr=zrOut, ng=ngOut);
    //----------------------------------------------------------------------------------------   
    // PC - handle ProgramCounter States
    //------------------------------------------------------------------------------------
    //  Eval JGT
    Or(a=zrOut, b=ngOut, out=eqNeg);
    Not(in=eqNeg, out=pos);
    And(a=instruction[0], b=pos, out=jgt);
    //  Eval JEQ
    And(a=instruction[1], b=zrOut, out=jeq);
    //  Eval JLT
    And(a=instruction[2], b=ngOut, out=jlt);
    //  Narrow to JLE
    Or(a=jeq, b=jlt, out=jle);
    //  Narrow to JGE
    Or(a=jle, b=jgt, out=jge);
    //  Determine if input is instruction
    And(a=jge, b=instruction[15], out=loadPC);
    PC(in=aRegOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc[0..14], out[15]=false);
    //  Write to M
    And(a=instruction[3], b=instruction[15], out=writeM);
    //----------------------------------------------------------------------------------------   
    // END PC
    //------------------------------------------------------------------------------------
}